{"version":3,"sources":["components/utility/functions/workWithLocalStorage.js","state/reducers/searchBarSlice.js","components/SearchBar/SearchBar.jsx","components/SwitchButton/SwitchButton.jsx","components/Header/Header.jsx","state/reducers/notesSlice.js","state/reducers/infoPopupSlice.js","components/Note/Note.jsx","customHooks/useCurrentWidth.js","state/reducers/addNoteButtonSlice.js","components/AddNoteButton/AddNoteButton.jsx","components/Backdrop/Backdrop.jsx","customHooks/useClickOuside.js","components/ControlsBar/ControlsPopup/ControlsPopup.jsx","components/ControlsBar/ColorsPopup/ColorsPopup.jsx","components/ControlsBar/ControlsBar.jsx","components/NoteEditor/NoteEditor.jsx","components/Dashboard/Dashboard.jsx","components/SelectedNote/SelectedNote.jsx","components/InfoPopup/InfoPopup.jsx","App.js","state/reducers/controlsPopup.js","state/store.js","index.js"],"names":["getDataFromLocalStorage","dataType","localStorage","getItem","JSON","parse","setDataToLocalStorage","data","setItem","stringify","searchBarSlice","createSlice","name","initialState","text","reducers","setSearchBarText","state","action","payload","actions","SearchBar","dispatch","useDispatch","className","size","type","placeholder","onChange","e","target","value","SwitchButton","isDarkMode","checked","Header","setDarkMode","notes","notesSlice","addNote","newNote","id","nanoid","title","textHtml","textContent","date","Date","toLocaleDateString","split","join","color","noteColor","randomColor","luminosity","imageUrl","push","deleteNote","updatedNotes","filter","note","updateNote","noteIndex","findIndex","infoPopupSlice","isShow","content","showInfoPopup","closeInfoPopup","setInfoPopupContent","Note","windowWidth","refContainerNote","useRef","refContainerNoteText","history","useHistory","useEffect","current","innerHTML","ref","style","backgroundColor","onDoubleClick","src","alt","slice","onClick","getWidth","window","innerWidth","document","documentElement","clientWidth","body","addNoteButtonSlice","isHide","click","AddNoteButton","useSelector","addNoteButton","Backdrop","isShowBackdrop","useClickOutside","handler","domNodeRef","outsideClickHandler","contains","addEventListener","removeEventListener","ControlsPopup","isControlsPopupOpen","popupType","setIsControlsPopupOpen","controlsPopupPosition","editTextarea","useState","link","setLink","popupContent","controlsPopup","left","display","inputField","stopPropagation","map","item","handleClick","submitButton","ColorsPopup","isColorPopupOpen","setIsColorPopupOpen","addColor","ControlsBar","setImageUrl","updateHtml","refContainerTextarea","setNoteColor","setPopupType","setControlsPopupPosition","openCloseControlsPopup","currentTarget","offsetLeft","execCommand","NoteEditor","setTitle","setText","html","setHtml","isShowNoteEditor","handleEvent","trim","length","contentEditable","onKeyPress","ctrlKey","onKeyUp","onPaste","preventDefault","clipboardData","getData","Dashboard","searchBarText","searchBar","width","setWidth","useLayoutEffect","resizeListener","useCurrentWidth","filteredNotes","toLowerCase","includes","SelectedNote","useParams","find","editMode","setEditMode","err","Error","message","fontFamily","updatedNote","InfoPopup","infoPopup","timeoutId","setTimeout","clearTimeout","App","setIsDarkMode","isDarkModeData","exact","path","default","fontName","fontSize","createLink","addImage","controlsPopupSlice","store","configureStore","reducer","notesReducer","searchBarReducer","addNoteButtonReducer","controlsPopupReducer","infoPopupReducer","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.ad43c6ec.chunk.js","sourcesContent":["\r\nexport const getDataFromLocalStorage = (dataType) => {\r\n    if (localStorage.getItem(dataType)) {\r\n        return JSON.parse(localStorage.getItem(dataType))    \r\n    }\r\n    return null;\r\n}\r\n\r\nexport const setDataToLocalStorage = (dataType, data) => {\r\n    localStorage.setItem(dataType, JSON.stringify(data));\r\n}","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {\r\n    text: ''\r\n}\r\n\r\nexport const searchBarSlice = createSlice({\r\n    name: 'searchBar',\r\n    initialState,\r\n    \r\n    reducers: {\r\n        setSearchBarText: (state, action) => {\r\n            state.text = action.payload;\r\n        }\r\n    }\r\n});\r\n\r\nexport const { setSearchBarText } = searchBarSlice.actions;\r\nexport default searchBarSlice.reducer;","import { MdSearch } from \"react-icons/md\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { setSearchBarText } from \"../../state/reducers/searchBarSlice\";\r\n\r\nimport './SearchBar.scss';\r\n\r\nconst SearchBar = () => {\r\n    \r\n    const dispatch = useDispatch();\r\n    \r\n    const handleChange = (e) => {\r\n        dispatch(setSearchBarText(e.target.value));\r\n    };\r\n    \r\n    return (\r\n        <div className=\"search-bar\">\r\n            <MdSearch className=\"search=icon\" size=\"1.3em\" />\r\n            <input \r\n                type=\"text\" \r\n                placeholder=\"search...\"\r\n                onChange={handleChange}\r\n            />        \r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SearchBar;","import React from 'react';\r\n\r\nimport './SwitchButton.scss';\r\n\r\nconst SwitchButton = ({ isDarkMode, action }) => {\r\n    \r\n    const toggle = (e) => {\r\n        action(e.target.checked);\r\n    };\r\n    \r\n    return (\r\n        <label className=\"switch-button\">\r\n            <input \r\n                type=\"checkbox\" \r\n                className=\"switch-button-checkbox\"\r\n                checked={isDarkMode} \r\n                onChange={toggle}\r\n            />\r\n            <span className=\"switch-button-slider\" />\r\n        </label>\r\n    );\r\n};\r\n\r\nexport default SwitchButton;","import React from 'react';\r\n\r\nimport SearchBar from '../SearchBar/SearchBar';\r\nimport SwitchButton from '../SwitchButton/SwitchButton';\r\n\r\nimport { BiSun } from 'react-icons/bi';\r\nimport { BiMoon } from 'react-icons/bi';\r\n\r\nimport './Header.scss';\r\n\r\nconst Header = ({ isDarkMode, setDarkMode }) => {\r\n    \r\n    return (\r\n        <header className=\"header\">\r\n            <div className=\"container\">\r\n                <section className=\"header-panel\">\r\n                    <h1 className=\"header-title\">Notes</h1>\r\n                    <section className=\"light-or-dark-mode\">\r\n                        {\r\n                            isDarkMode ?\r\n                            <BiMoon className=\"mod-icon\" />\r\n                            :\r\n                            <BiSun className=\"mod-icon\" />\r\n                        }\r\n                        <SwitchButton \r\n                            isDarkMode={isDarkMode}\r\n                            action={setDarkMode}\r\n                        />\r\n                    </section>\r\n                </section>\r\n\r\n                <SearchBar />    \r\n            </div>    \r\n        </header>\r\n    );\r\n};\r\n\r\nexport default Header;","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { nanoid } from \"nanoid\";\r\nimport randomColor from \"randomcolor\";\r\n\r\nimport { getDataFromLocalStorage } from \"../../components/utility/functions/workWithLocalStorage\";\r\nimport { setDataToLocalStorage } from \"../../components/utility/functions/workWithLocalStorage\";\r\n\r\nconst notesData = getDataFromLocalStorage('notes') || [];\r\n\r\nconst initialState = {\r\n    notes: notesData\r\n};\r\n\r\nexport const notesSlice = createSlice({\r\n    name: 'notes',\r\n    initialState,\r\n    \r\n    reducers: {\r\n        \r\n        addNote: (state, action) => {\r\n            const newNote = {\r\n                id: nanoid(),\r\n                title: action.payload.title,\r\n                textHtml: action.payload.textHtml,\r\n                textContent: action.payload.textContent,\r\n                date: new Date().toLocaleDateString().split('.').join('/'),\r\n                color: action.payload.noteColor || randomColor({\r\n                    luminosity: 'light'\r\n                }),\r\n                imageUrl: action.payload.imageUrl\r\n            };\r\n\r\n            state.notes.push(newNote);\r\n\r\n            // then updating the local storage\r\n            setDataToLocalStorage('notes', state.notes);\r\n        },  \r\n\r\n        deleteNote: (state, action) => {\r\n            const updatedNotes = state.notes.filter(note => note.id !== action.payload);\r\n            state.notes = updatedNotes;\r\n\r\n            // then updating the local storage\r\n            setDataToLocalStorage('notes', state.notes);\r\n        },\r\n\r\n        updateNote: (state, action) => {\r\n            const noteIndex = state.notes.findIndex(note => note.id === action.payload.id);\r\n            state.notes[noteIndex] = action.payload;\r\n\r\n            // then updating the local storage\r\n            setDataToLocalStorage('notes', state.notes);\r\n        }\r\n    }\r\n});\r\n\r\nexport const { addNote, deleteNote, updateNote } = notesSlice.actions;\r\n\r\nexport default notesSlice.reducer;","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {\r\n    isShow: false,\r\n    content: 'Some Content'\r\n}\r\n\r\nconst infoPopupSlice = createSlice({\r\n    name: 'infopopup',\r\n    initialState,\r\n    reducers: {\r\n        showInfoPopup: (state) => {\r\n            state.isShow = true;\r\n        },\r\n\r\n        closeInfoPopup: (state) => {\r\n            state.isShow = false;\r\n        },\r\n\r\n        setInfoPopupContent: (state, action) => {\r\n            state.content = action.payload;\r\n        }\r\n    }\r\n});\r\n\r\nexport const { showInfoPopup, closeInfoPopup, setInfoPopupContent } = infoPopupSlice.actions;\r\n\r\nexport default infoPopupSlice.reducer;","import { useEffect, useRef } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nimport { deleteNote } from '../../state/reducers/notesSlice';\r\nimport { showInfoPopup, setInfoPopupContent } from '../../state/reducers/infoPopupSlice';\r\n\r\nimport { MdDeleteForever } from 'react-icons/md';\r\n\r\nimport './Note.scss';\r\n\r\nconst Note = ({ note, windowWidth }) => {\r\n    \r\n    const { id, title, textHtml, textContent, date, color, imageUrl } = note;\r\n\r\n    const refContainerNote = useRef(null);\r\n    const refContainerNoteText = useRef(null);\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n\r\n    // opens SelectedNote component with route \"/:id\" \r\n    const openSelectedNote = () => {\r\n        history.push(`/${id}`);\r\n    };\r\n    \r\n    // double tap on note is opening it on all window\r\n    const tappingNote = () => {\r\n        openSelectedNote();\r\n    };\r\n\r\n    const handleDeleteNote = () => {\r\n        dispatch(deleteNote(id));\r\n        dispatch(setInfoPopupContent('Note deleted'));\r\n        dispatch(showInfoPopup());\r\n    };\r\n    \r\n    useEffect(() => { \r\n        // Adding text content in use effect (when component mounth),\r\n        // because note text is HTML\r\n        refContainerNoteText.current.innerHTML = textHtml;\r\n    }, []);\r\n    \r\n    return (\r\n            <article \r\n                className=\"note\"\r\n                ref={refContainerNote}\r\n                style={{backgroundColor: color}}\r\n                onDoubleClick={tappingNote}\r\n            >\r\n                <img src={imageUrl} className=\"inline-image\" alt=\"\" />\r\n                \r\n                <h2 className=\"note-title\">{title}</h2>\r\n                \r\n                <p\r\n                    className=\"note-text\" \r\n                    ref={refContainerNoteText}\r\n                >\r\n                </p>\r\n                <p className=\"hidden-text\">\r\n                    {windowWidth < 576 && textContent.slice(0, 100) + '...'}\r\n                </p>\r\n                <footer className=\"note-footer\">\r\n                    <small>{date}</small>\r\n                    <MdDeleteForever \r\n                        className=\"delete-icon\"\r\n                        size=\"1.3em\"\r\n                        onClick={ handleDeleteNote }\r\n                    />\r\n                </footer>\r\n            </article>\r\n    );\r\n};\r\n\r\nexport default Note;","import { useState, useLayoutEffect } from \"react\";\r\n\r\nconst getWidth = () => window.innerWidth\r\n    || document.documentElement.clientWidth\r\n    || document.body.clientWidth;\r\n\r\nexport function useCurrentWidth() {\r\n    \r\n    // save current window width in the state object\r\n    let [width, setWidth] = useState(getWidth());\r\n\r\n    // in this case useEffect will execute only once because\r\n    // it does not have any dependencies.\r\n    useLayoutEffect(() => {\r\n        \r\n        const resizeListener = () => {\r\n            // change width from the state object\r\n            setWidth(getWidth());\r\n        };\r\n\r\n        // set resize listener\r\n        window.addEventListener('resize', resizeListener);\r\n\r\n        resizeListener();\r\n\r\n        // clean up function\r\n        return () => {\r\n            // remove resize listener\r\n            window.removeEventListener('resize', resizeListener)\r\n        }\r\n    }, []);\r\n\r\n    return width;\r\n    \r\n}","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {\r\n    isHide: false\r\n};\r\n\r\nexport const addNoteButtonSlice = createSlice({\r\n    name: 'addNoteButton',\r\n    initialState,\r\n    \r\n    reducers: {\r\n        click: (state) => {\r\n            state.isHide = !state.isHide\r\n        }\r\n    }\r\n});\r\n\r\nexport const { click } = addNoteButtonSlice.actions;\r\n\r\nexport default addNoteButtonSlice.reducer;","import React from 'react';\r\nimport { AiOutlineFileAdd } from 'react-icons/ai';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { click } from '../../state/reducers/addNoteButtonSlice';\r\n\r\nimport './AddNoteButton.scss';\r\n\r\nconst AddNoteButton = () => {\r\n    \r\n    const isHide = useSelector((state) => state.addNoteButton.isHide);\r\n    const dispatch = useDispatch();\r\n\r\n    const handleClick = () => {\r\n        dispatch(click());\r\n    };\r\n    \r\n    return (\r\n        <button \r\n            className={`btn add-note-button ${isHide && 'hide'}`}\r\n            onClick={handleClick}\r\n        >\r\n            <AiOutlineFileAdd />\r\n        </button>\r\n    );\r\n};\r\n\r\nexport default AddNoteButton;","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport './Backdrop.scss';\r\n\r\nconst Backdrop = () => {\r\n    \r\n    // isShow depends on AddNoteButton state.\r\n    // If AddNoteButton's display style property is false,\r\n    // isShow becomes true  \r\n    const isShowBackdrop = useSelector((state) => state.addNoteButton.isHide);\r\n    \r\n    return (\r\n        <div className={`backdrop ${isShowBackdrop && 'show'}`}></div>\r\n    );\r\n};\r\n\r\nexport default Backdrop;","import { useEffect, useRef } from 'react';\r\n\r\n\r\nexport const useClickOutside = (handler) => {\r\n    \r\n    const domNodeRef = useRef();\r\n    \r\n    useEffect(() => {\r\n        // handle ouside click\r\n        const outsideClickHandler = (e) => {\r\n            if (!domNodeRef.current.contains(e.target)) {\r\n                handler(false);\r\n            }\r\n        }\r\n        document.addEventListener('mousedown', outsideClickHandler);\r\n\r\n        return () => {\r\n            document.removeEventListener('mousedown', outsideClickHandler);\r\n        }\r\n    });\r\n\r\n    return domNodeRef;\r\n};","import React from 'react';\r\nimport { useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { useClickOutside } from '../../../customHooks/useClickOuside';\r\n\r\nimport './ControlsPopup.scss';\r\n\r\nconst ControlsPopup = ({\r\n    isControlsPopupOpen,\r\n    popupType,\r\n    setIsControlsPopupOpen,\r\n    controlsPopupPosition,\r\n    editTextarea\r\n}) => {\r\n\r\n    const [link, setLink] = useState('');\r\n    const popupContent = useSelector(state => state.controlsPopup[popupType]);\r\n    const domNodeRef = useClickOutside(setIsControlsPopupOpen);\r\n    \r\n    // Need to set stopPropagation, in order case,\r\n    // if user try to select input field, the popup will be closed,\r\n    // because click event of \"openCloseControlsPopup\" function is bubbling\r\n    // and spreads on input field too.  \r\n    const handleInputClick = (e) => {\r\n        e.stopPropagation();\r\n    };\r\n\r\n    const handleSubmitClick = () => {\r\n        editTextarea(popupType, link);\r\n        setLink('');\r\n    };\r\n\r\n    const handleClick = (link) => {\r\n        editTextarea(popupType, link);\r\n    };\r\n\r\n    return (\r\n        <div\r\n            className={`popup ${isControlsPopupOpen && 'show-popup'}`}\r\n            style={{ left: controlsPopupPosition + 'px' }}\r\n            ref={domNodeRef}\r\n            onClick={() => setIsControlsPopupOpen(false)}\r\n        >\r\n            <input\r\n                className=\"link-input\"\r\n                style={{ display: popupContent.inputField }}\r\n                value={link}\r\n                onChange={(e) => setLink(e.target.value)}\r\n                onClick={handleInputClick}\r\n            />\r\n\r\n            {popupContent.content.map(item => {\r\n                return (\r\n                    <button\r\n                        key={item.id}\r\n                        className=\"btn popup-btn\"\r\n                        onClick={() => handleClick(item.value)}\r\n                    >\r\n                        {item.name}\r\n                    </button>\r\n                );\r\n            })}\r\n\r\n            <button\r\n                className=\"btn popup-btn\"\r\n                style={{ display: popupContent.submitButton }}\r\n                onClick={handleSubmitClick}\r\n            >\r\n                Create Link\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ControlsPopup;","import React from 'react';\r\nimport { useClickOutside } from '../../../customHooks/useClickOuside';\r\nimport './ColorsPopup.scss';\r\n\r\n\r\nconst ColorsPopup = ({ isColorPopupOpen, setIsColorPopupOpen, addColor}) => {\r\n    \r\n    // handle outside click\r\n    const domNodeRef = useClickOutside(setIsColorPopupOpen);\r\n    \r\n    return (\r\n        <div\r\n            className=\"colors-popup\"\r\n            style={{ display: isColorPopupOpen ? 'flex' : 'none' }}\r\n            ref={domNodeRef}\r\n            onClick={() => setIsColorPopupOpen(!isColorPopupOpen)}\r\n        >\r\n            <div className=\"colors\">\r\n                <div\r\n                    className=\"color\"\r\n                    id=\"#feefc3\"\r\n                    style={{ backgroundColor: \"#feefc3\" }}\r\n                    onClick={() => addColor('#feefc3')}\r\n                >\r\n                </div>\r\n                <div\r\n                    className=\"color\"\r\n                    id=\"#f28b82\"\r\n                    style={{ backgroundColor: \"#f28b82\" }}\r\n                    onClick={() => addColor('#f28b82')}\r\n                >\r\n                </div>\r\n                <div\r\n                    className=\"color\"\r\n                    id=\"#fbbc04\"\r\n                    style={{ backgroundColor: \"#fbbc04\" }}\r\n                    onClick={() => addColor('#fbbc04')}\r\n                >\r\n                </div>\r\n                <div\r\n                    className=\"color\"\r\n                    id=\"#ccff90\"\r\n                    style={{ backgroundColor: \"#ccff90\" }}\r\n                    onClick={() => addColor('#ccff90')}\r\n                >\r\n                </div>\r\n                <div\r\n                    className=\"color\"\r\n                    id=\"#a7ffeb\"\r\n                    style={{ backgroundColor: \"#a7ffeb\" }}\r\n                    onClick={() => addColor('#a7ffeb')}\r\n                >\r\n                </div>\r\n                <div\r\n                    className=\"color\"\r\n                    id=\"#cbf0f8\"\r\n                    style={{ backgroundColor: \"#cbf0f8\" }}\r\n                    onClick={() => addColor('#cbf0f8')}\r\n                >\r\n                </div>\r\n                <div\r\n                    className=\"color\"\r\n                    id=\"#aecbfa\"\r\n                    style={{ backgroundColor: \"#aecbfa\" }}\r\n                    onClick={() => addColor('#aecbfa')}\r\n                >\r\n                </div>\r\n                <div\r\n                    className=\"color\"\r\n                    id=\"#fdcfe8\"\r\n                    style={{ backgroundColor: \"#fdcfe8\" }}\r\n                    onClick={() => addColor('#fdcfe8')}\r\n                >\r\n                </div>\r\n                <div\r\n                    className=\"color\"\r\n                    id=\"#cf9fff\"\r\n                    style={{ backgroundColor: \"#cf9fff\" }}\r\n                    onClick={() => addColor('#cf9fff')}\r\n                >\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ColorsPopup;","import React from 'react';\r\nimport { useState } from 'react';\r\n\r\nimport ControlsPopup from './ControlsPopup/ControlsPopup';\r\nimport ColorsPopup from './ColorsPopup/ColorsPopup';\r\n\r\nimport { BiFont } from 'react-icons/bi';\r\nimport { BiFontSize } from 'react-icons/bi';\r\nimport { AiOutlineBold } from 'react-icons/ai';\r\nimport { AiOutlineItalic } from 'react-icons/ai';\r\nimport { BiLink } from 'react-icons/bi';\r\nimport { BiImage } from 'react-icons/bi';\r\nimport { BiPalette } from 'react-icons/bi';\r\n\r\nimport './ControlsBar.scss';\r\n\r\n\r\nconst ControlsBar = ({ setImageUrl, updateHtml, refContainerTextarea, setNoteColor }) => {\r\n\r\n    const [isControlsPopupOpen, setIsControlsPopupOpen] = useState(false);\r\n    const [popupType, setPopupType] = useState('default');\r\n    const [controlsPopupPosition, setControlsPopupPosition] = useState(0);\r\n    const [isColorPopupOpen, setIsColorPopupOpen] = useState(false);\r\n\r\n    const openCloseControlsPopup = (e) => {\r\n        \r\n        // Dynamically sets position (offset from left border of NoteEditor)\r\n        // to ControlsPopup component\r\n        setControlsPopupPosition(e.currentTarget.offsetLeft);\r\n        \r\n        // Open or close popup\r\n        if (isControlsPopupOpen && popupType === e.currentTarget.id) {\r\n            setIsControlsPopupOpen(false);\r\n        } else if (isControlsPopupOpen && popupType !== e.currentTarget.id) {\r\n            setPopupType(e.currentTarget.id);\r\n        } else {\r\n            setIsControlsPopupOpen(!isControlsPopupOpen);\r\n            setPopupType(e.currentTarget.id);\r\n        }\r\n    };\r\n\r\n    // If the parameter \"value\" is not used, \r\n    // then an empty string must be passed to \"value\".\r\n    // Type gets from button id\r\n    const editTextarea = (type, value) => {\r\n        if (value) {\r\n            if (type === 'addImage') {\r\n                setImageUrl(value);\r\n            } else {\r\n                document.execCommand(type, false, value);\r\n            }\r\n        } else {\r\n            document.execCommand(type);\r\n        }\r\n        updateHtml(refContainerTextarea.innerHTML);\r\n    };\r\n\r\n    const editTextBold = (e) => {\r\n        document.execCommand('bold');\r\n        updateHtml(refContainerTextarea.innerHTML);\r\n    };\r\n\r\n    const editTextItalic = () => {\r\n        document.execCommand('italic');\r\n        updateHtml(refContainerTextarea.innerHTML);\r\n    };\r\n\r\n    const addColor = (color) => {\r\n        setNoteColor(color);\r\n    };\r\n\r\n    return (\r\n        <div className=\"controls-bar\">\r\n            <ul className=\"controls\">\r\n                <li className=\"controls-item\">\r\n                    <button\r\n                        type=\"button\"\r\n                        id=\"fontName\"\r\n                        className=\"btn controls-btn\"\r\n                        onClick={openCloseControlsPopup}\r\n                    >\r\n                        <BiFont />\r\n                    </button>\r\n                </li>\r\n                <li className=\"controls-item\">\r\n                    <button\r\n                        type=\"button\"\r\n                        id=\"fontSize\"\r\n                        className=\"btn controls-btn\"\r\n                        onClick={openCloseControlsPopup}\r\n                    >\r\n                        <BiFontSize />\r\n                    </button>\r\n                </li>\r\n                <li className=\"controls-item\">\r\n                    <button\r\n                        type=\"button\"\r\n                        id=\"bold\"\r\n                        className=\"btn controls-btn\"\r\n                        onClick={editTextBold}\r\n                    >\r\n                        <AiOutlineBold />\r\n                    </button>\r\n                </li>\r\n                <li className=\"controls-item\">\r\n                    <button\r\n                        type=\"button\"\r\n                        id=\"italic\"\r\n                        className=\"btn controls-btn\"\r\n                        onClick={editTextItalic}\r\n                    >\r\n                        <AiOutlineItalic />\r\n                    </button>\r\n                </li>\r\n                <li className=\"controls-item\">\r\n                    <button\r\n                        type=\"button\"\r\n                        id=\"createLink\"\r\n                        className=\"btn controls-btn\"\r\n                        onClick={openCloseControlsPopup}\r\n                    >\r\n                        <BiLink />\r\n                    </button>\r\n                </li>\r\n                <li className=\"controls-item\">\r\n                    <button\r\n                        type=\"button\"\r\n                        id=\"addImage\"\r\n                        className=\"btn controls-btn\"\r\n                        onClick={openCloseControlsPopup}\r\n                    >\r\n                        <BiImage />\r\n                    </button>\r\n                </li>\r\n                <li className=\"controls-item\">\r\n                    <button\r\n                        type=\"button\"\r\n                        id=\"noteColor\"\r\n                        className=\"btn controls-btn\"\r\n                        onClick={ () => setIsColorPopupOpen(!isColorPopupOpen) }    \r\n                    >\r\n                        <BiPalette />\r\n                    </button>\r\n                </li>\r\n            </ul>\r\n\r\n            <ControlsPopup\r\n                isControlsPopupOpen={isControlsPopupOpen}\r\n                popupType={popupType}\r\n                setIsControlsPopupOpen={setIsControlsPopupOpen}\r\n                controlsPopupPosition={controlsPopupPosition}\r\n                editTextarea={editTextarea}\r\n            />\r\n\r\n            <ColorsPopup \r\n                isColorPopupOpen={isColorPopupOpen}\r\n                setIsColorPopupOpen={setIsColorPopupOpen}\r\n                addColor={addColor}\r\n            />\r\n\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default ControlsBar;","import { useEffect, useState, useRef } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { addNote } from \"../../state/reducers/notesSlice\";\r\nimport { click } from \"../../state/reducers/addNoteButtonSlice\";\r\n\r\nimport { showInfoPopup, setInfoPopupContent } from \"../../state/reducers/infoPopupSlice\";\r\n\r\nimport { AiOutlineClose } from 'react-icons/ai';\r\n\r\nimport ControlsBar from \"../ControlsBar/ControlsBar\";\r\n\r\nimport './NoteEditor.scss';\r\n\r\nconst NoteEditor = () => {\r\n\r\n    const [title, setTitle] = useState('');\r\n    const [text, setText] = useState('');\r\n    const [html, setHtml] = useState('');\r\n\r\n    const [imageUrl, setImageUrl] = useState('');\r\n    const [noteColor, setNoteColor] = useState('');\r\n\r\n    const characterLimit = 200;\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const refContainerTextarea = useRef(null);\r\n\r\n    // isShow depends on AddNoteButton state.\r\n    // If AddNoteButton's display style property is false,\r\n    // isShow becomes true\r\n    const isShowNoteEditor = useSelector((state) => state.addNoteButton.isHide);\r\n\r\n    // Updates state from textarea html\r\n    const updateHtml = (html) => {\r\n        setHtml(html);\r\n    }\r\n\r\n    // Triggers this event when user is clicks the \"save note\" button\r\n    const handleEvent = () => {\r\n        if (!text.trim().length) {\r\n            \r\n            // show info popup\r\n            dispatch(setInfoPopupContent(\"Can't save a note without text\"));\r\n            dispatch(showInfoPopup());\r\n\r\n            return;\r\n        }\r\n\r\n        dispatch(addNote({\r\n            title: title,\r\n            textHtml: html,\r\n            textContent: text,\r\n            noteColor,\r\n            imageUrl\r\n        }));\r\n\r\n        // Dispatching AddNodeButton action \"click\", it triggers\r\n        // the isHide state property of AddNodeButton and makes display property\r\n        // of  NoteEditor and Backdrop components is none. \r\n        // This components display style property depends on AddNoteButton state.  \r\n        dispatch(click());\r\n\r\n        // clear the title\r\n        setTitle('');\r\n        \r\n        // clear text field\r\n        setText('');\r\n\r\n        // clear state data of html\r\n        setHtml('');\r\n\r\n        // clear image url\r\n        setImageUrl('');\r\n\r\n        // clear color\r\n        setNoteColor('');\r\n    };\r\n\r\n    // Closing editor without save note\r\n    const closeEditor = () => {\r\n        dispatch(click());\r\n    };\r\n\r\n    // Adding text\r\n    const handleTextAdding = (e) => {\r\n        setText(e.target.textContent);\r\n        setHtml(e.target.innerHTML);\r\n    };\r\n\r\n    // Create note\r\n    const handleClick = () => {\r\n        handleEvent();\r\n    };\r\n\r\n    // Create note when pressed keys \"ctrl + enter\"\r\n    const handleKeyPress = (e) => {\r\n        if (e.ctrlKey) {\r\n            handleEvent();\r\n        }\r\n    };\r\n\r\n    // handle paste from clipboard\r\n    const pasteText = (e) => {\r\n        e.preventDefault();\r\n        const text = e.clipboardData.getData('Text');\r\n        document.execCommand('insertText', false, text);\r\n    };\r\n\r\n    const addNoteTitle = (e) => {\r\n        setTitle(e.target.value);\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n        // Making restrictions for text adding. The limit is 200 characters\r\n        // If user taped 200 chars in textarea - changing contentEditable property on false,\r\n        // so the user will not be able to enter any further text. \r\n        if (characterLimit - text.length === 0) {\r\n            refContainerTextarea.current.contentEditable = \"false\";\r\n\r\n            // when user clicks \"save note\", state of \"text\" is change on default (\"\").\r\n            // So the text.length becomes 0 and the property \"contentEditable\" is set to true.  \r\n        } else if (text.length === 0) {\r\n            refContainerTextarea.current.contentEditable = \"true\";\r\n            refContainerTextarea.current.innerHTML = \"\";\r\n        }\r\n    }, [text]);\r\n\r\n    return (\r\n        <div\r\n            className={`note-editor ${isShowNoteEditor && 'show'}`}\r\n            onKeyPress={handleKeyPress}\r\n        >\r\n            <AiOutlineClose\r\n                className=\"note-editor-close-btn\"\r\n                onClick={closeEditor}\r\n            />\r\n\r\n            <input \r\n                className=\"note-editor-title\"\r\n                type=\"text\"\r\n                value={title}\r\n                placeholder=\"Add title...\"\r\n                onChange={addNoteTitle} \r\n            />\r\n\r\n            <img src={imageUrl} className=\"note-image\" alt=\"\" />\r\n            \r\n            <p\r\n                className=\"textarea\"\r\n                contentEditable=\"true\"\r\n                data-placeholder=\"Add the text...\"\r\n                ref={refContainerTextarea}\r\n                onKeyUp={handleTextAdding}\r\n                onPaste={pasteText}\r\n            >\r\n            </p>\r\n\r\n            <footer className=\"note-editor-footer\">\r\n                \r\n                <ControlsBar \r\n                    setImageUrl={setImageUrl}\r\n                    setNoteColor={setNoteColor}\r\n                    updateHtml={updateHtml} \r\n                    refContainerTextarea={refContainerTextarea.current}\r\n                />\r\n                \r\n                <section className=\"note-editor-footer-section\">\r\n                    <small>{characterLimit - text.length} Remainings</small>\r\n                    <button\r\n                        type=\"button\"\r\n                        className=\"btn save-btn\"\r\n                        onClick={handleClick}\r\n                    >\r\n                        Save Note\r\n                    </button>\r\n                </section>    \r\n            </footer>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default NoteEditor;","import { useSelector } from 'react-redux';\r\nimport Note from '../Note/Note';\r\nimport { useCurrentWidth } from '../../customHooks/useCurrentWidth';\r\n\r\nimport AddNoteButton from '../AddNoteButton/AddNoteButton';\r\nimport Backdrop from '../Backdrop/Backdrop';\r\nimport NoteEditor from '../NoteEditor/NoteEditor';\r\n\r\nimport './Dashboard.scss';\r\n\r\nconst Dashboard = () => {\r\n\r\n    const notes = useSelector((state) => state.notes.notes);\r\n    const searchBarText = useSelector((state) => state.searchBar.text);\r\n    \r\n    // getting window width with every resize\r\n    const windowWidth = useCurrentWidth();\r\n   \r\n    // filtered data of notes list\r\n    const filteredNotes = notes.filter(note => {\r\n        return note.textContent.toLowerCase().includes(searchBarText.trim().toLowerCase())\r\n        || note.title.toLowerCase().includes(searchBarText.trim().toLowerCase());\r\n    });\r\n\r\n    return (\r\n        <section className=\"dashboard\">\r\n            {filteredNotes.map(note => {\r\n                return (\r\n                    <Note\r\n                        key={note.id}\r\n                        note={note}\r\n                        windowWidth={windowWidth}\r\n                    />\r\n                );\r\n            })}\r\n\r\n            <AddNoteButton />\r\n            <Backdrop />\r\n            <NoteEditor />\r\n\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default Dashboard;","import React from 'react';\r\nimport { useState, useEffect, useRef } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { useParams, useHistory } from 'react-router-dom';\r\n\r\nimport { deleteNote, updateNote } from '../../state/reducers/notesSlice';\r\nimport { showInfoPopup, setInfoPopupContent } from '../../state/reducers/infoPopupSlice';\r\n\r\nimport { MdDeleteForever } from 'react-icons/md';\r\nimport { AiOutlineClose } from 'react-icons/ai';\r\nimport { BiEdit } from 'react-icons/bi';\r\n\r\nimport ControlsBar from '../ControlsBar/ControlsBar';\r\n\r\nimport './SelectedNote.scss';\r\n\r\n\r\nconst SelectedNote = () => {\r\n\r\n    const { id } = useParams();\r\n    const notes = useSelector(state => state.notes.notes);\r\n    const note = notes.find(note => note.id === id);\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const refContainerNoteText = useRef(null);\r\n\r\n    const [editMode, setEditMode] = useState(false);\r\n\r\n    const [html, setHtml] = useState('');\r\n    const [imageUrl, setImageUrl] = useState('');\r\n    const [noteColor, setNoteColor] = useState('');\r\n\r\n    const handleDeleteSelectedNote = () => {\r\n        dispatch(deleteNote(id));\r\n        dispatch(setInfoPopupContent('Note deleted'));\r\n        dispatch(showInfoPopup());\r\n        \r\n        history.push('/');\r\n    };\r\n\r\n    const closeSelectedNote = () => {\r\n        history.push('/');\r\n    };\r\n\r\n    const toggleEditMode = () => {\r\n        setEditMode(!editMode);\r\n    };\r\n\r\n    // Adding text\r\n    const handleTextAdding = (e) => {\r\n        setHtml(e.target.innerHTML);\r\n    };\r\n\r\n    const saveChanges = () => {\r\n        \r\n        const updatedNote = { ...note };\r\n\r\n        updatedNote.textHtml = html;\r\n        updatedNote.textContent = refContainerNoteText.current.textContent;\r\n        updatedNote.color = noteColor;\r\n        updatedNote.imageUrl = imageUrl;\r\n\r\n        dispatch(updateNote(updatedNote));\r\n\r\n        setEditMode(!editMode);\r\n\r\n        dispatch(setInfoPopupContent('Changes saved'));\r\n        dispatch(showInfoPopup());\r\n    };\r\n\r\n    // Note initialization\r\n    useEffect(() => {\r\n\r\n        if (!note) {\r\n            return;\r\n        }\r\n\r\n        try {\r\n            setImageUrl(note.imageUrl);\r\n            setNoteColor(note.color);\r\n            setHtml(note.textHtml);\r\n            refContainerNoteText.current.innerHTML = note.textHtml;\r\n        } catch (err) {\r\n            throw new Error(err.message);\r\n        }\r\n\r\n    }, []);\r\n\r\n    if (!note) {\r\n        return (\r\n            <div className=\"error\">\r\n                <h1>404</h1>\r\n                <h2>Note with this id is not exist...</h2>\r\n                <button\r\n                    type=\"button\"\r\n                    className=\"btn error-btn\"\r\n                    onClick={() => history.push('/')}\r\n                >\r\n                    Return to dashboard\r\n                </button>\r\n            </div>\r\n        );\r\n    };\r\n\r\n    return (\r\n        <article\r\n            className=\"selected-note\"\r\n            style={{ backgroundColor: noteColor }}\r\n        >\r\n            <AiOutlineClose\r\n                className=\"selected-note-close-btn\"\r\n                onClick={closeSelectedNote}\r\n            />\r\n\r\n            <img src={imageUrl} className=\"selected-note-inline-image\" alt=\"\" />\r\n\r\n            <h2 className=\"selected-note-title\">{note.title}</h2>\r\n\r\n            <p\r\n                className=\"selected-note-text\"\r\n                ref={refContainerNoteText}\r\n                style={{ fontFamily: note.fontFamily }}\r\n                contentEditable={editMode}\r\n                onKeyUp={handleTextAdding}\r\n            >\r\n            </p>\r\n\r\n            <footer className=\"selected-note-footer\">\r\n\r\n                {editMode &&\r\n                    <ControlsBar\r\n                        setImageUrl={setImageUrl}\r\n                        updateHtml={setHtml}\r\n                        refContainerTextarea={refContainerNoteText.current}\r\n                        setNoteColor={setNoteColor}\r\n                    />\r\n                }\r\n\r\n                <section className=\"selected-note-footer-section\">\r\n                    <small>{note.date}</small>\r\n\r\n                    <button\r\n                        type={`button ${!editMode && 'edit-btn'}`}\r\n                        className={`btn edit-mode ${!editMode && 'edit-btn'}`}\r\n                        title=\"Edit Note\"\r\n                        onClick={toggleEditMode}\r\n                    >\r\n                        {!editMode ? <BiEdit size=\"2rem\" /> : 'Close Editing'}\r\n                    </button>\r\n\r\n                    {editMode &&\r\n                        <button\r\n                            className=\"btn edit-mode\"\r\n                            onClick={saveChanges}\r\n                        >\r\n                            Save Changes\r\n                        </button>}\r\n\r\n                    <button\r\n                        type=\"button\"\r\n                        className=\"btn selected-note-delete-btn\"\r\n                        title=\"Delete Note\"\r\n                        onClick={handleDeleteSelectedNote}\r\n                    >\r\n                        <MdDeleteForever />\r\n                    </button>\r\n                </section>\r\n\r\n            </footer>\r\n        </article>\r\n    );\r\n};\r\n\r\nexport default SelectedNote;","import React, { useEffect } from 'react';\r\n\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { setInfoPopupContent, closeInfoPopup } from '../../state/reducers/infoPopupSlice';\r\n\r\nimport './InfoPopup.scss';\r\n\r\nconst InfoPopup = () => {\r\n    \r\n    const isShow = useSelector(state => state.infoPopup.isShow);\r\n    const content = useSelector(state => state.infoPopup.content) || '';\r\n    \r\n    const dispatch = useDispatch();\r\n    \r\n    useEffect(() => {\r\n        const timeoutId = setTimeout(() => {\r\n            dispatch(setInfoPopupContent(''));\r\n            dispatch(closeInfoPopup());    \r\n        }, 2500);\r\n        return () => {\r\n            clearTimeout(timeoutId);\r\n        }\r\n    }, [isShow]);\r\n\r\n    return (\r\n        <div className={`info-popup ${isShow && 'show'}`}>\r\n            <div className=\"info-popup-content\">\r\n                {content}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default InfoPopup;","import { useEffect, useState } from \"react\";\r\n\r\nimport { Switch, Route } from \"react-router-dom\";\r\n\r\nimport { getDataFromLocalStorage, setDataToLocalStorage } from \"./components/utility/functions/workWithLocalStorage\";\r\n\r\nimport Header from \"./components/Header/Header\";\r\nimport Dashboard from \"./components/Dashboard/Dashboard\";\r\nimport SelectedNote from \"./components/SelectedNote/SelectedNote\";\r\nimport InfoPopup from \"./components/InfoPopup/InfoPopup\";\r\n\r\n\r\nconst App = () => {\r\n\r\n    const [isDarkMode, setIsDarkMode] = useState(false);\r\n\r\n    // sets isDarkMode from local storage when component mounted\r\n    useEffect(() => {\r\n        const isDarkModeData = getDataFromLocalStorage('darkMode');\r\n        setIsDarkMode(isDarkModeData);\r\n    }, []);\r\n\r\n    // sets isDarkMode to local storage when component update\r\n    useEffect(() => {\r\n        setDataToLocalStorage('darkMode', isDarkMode);\r\n    }, [isDarkMode])\r\n\r\n    return (\r\n        <main\r\n            className={`main ${isDarkMode && 'dark-mode'}`}\r\n        >\r\n            <Header\r\n                isDarkMode={isDarkMode}\r\n                setDarkMode={setIsDarkMode}\r\n            />\r\n            <div className=\"container\">\r\n\r\n                <Switch>\r\n                    <Route exact path=\"/\">\r\n                        <Dashboard />\r\n                    </Route>\r\n                    \r\n                    <Route path=\"/notes-app\">\r\n                        <Dashboard />\r\n                    </Route>\r\n\r\n                    <Route path=\"/:id\" >\r\n                        <SelectedNote />\r\n                    </Route>\r\n                </Switch>\r\n\r\n                <InfoPopup />\r\n\r\n            </div>\r\n        </main>\r\n    );\r\n};\r\n\r\nexport default App;","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { nanoid } from \"nanoid\";\r\n\r\nconst initialState = {\r\n    \r\n    default: {\r\n        inputField: 'none',\r\n        submitButton: 'none',\r\n        content: []\r\n    },\r\n\r\n    fontName: {\r\n        inputField: 'none',\r\n        submitButton: 'none',\r\n        content: [\r\n            { id: nanoid(), name: 'Roboto (default)', value: 'Roboto'},\r\n            { id: nanoid(), name: 'Courier New', value: 'Courier New'},\r\n            { id: nanoid(), name: 'Times New Roman', value: 'Times New Roman'},\r\n            { id: nanoid(), name: 'Patrick Hand', value: 'Patrick Hand'},\r\n            { id: nanoid(), name: 'Caveat', value: 'Caveat'},\r\n            { id: nanoid(), name: 'Nanum Pen Script', value: 'Nanum Pen Script'},\r\n            { id: nanoid(), name: 'Special Elite', value: 'Special Elite'},\r\n            { id: nanoid(), name: 'Fredericka the Great', value: 'Fredericka the Great'},\r\n            { id: nanoid(), name: 'Faster One', value: 'Faster One'},\r\n        ]\r\n    },\r\n\r\n    fontSize: {\r\n        inputField: 'none',\r\n        submitButton: 'none',\r\n        content: [\r\n            { id: nanoid(), name: '10px', value: '1' },\r\n            { id: nanoid(), name: '13px', value: '2' },\r\n            { id: nanoid(), name: '16px', value: '3' },\r\n            { id: nanoid(), name: '18px', value: '4' },\r\n            { id: nanoid(), name: '24px', value: '5' },\r\n            { id: nanoid(), name: '32px', value: '6' },\r\n            { id: nanoid(), name: '48px', value: '7' },\r\n        ]\r\n    },\r\n\r\n    createLink: {\r\n        inputField: 'block',\r\n        submitButton: 'block',\r\n        content: []\r\n    },\r\n\r\n    addImage: {\r\n        inputField: 'block',\r\n        submitButton: 'block',\r\n        content: []\r\n    },\r\n\r\n}\r\n\r\nexport const controlsPopupSlice = createSlice({\r\n    name: 'controlsPopup',\r\n    initialState,\r\n    reducers: {\r\n\r\n    }\r\n});\r\n\r\n//export const {} = controlsPopupSlice.actions;\r\n\r\nexport default controlsPopupSlice.reducer;","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport notesReducer from './reducers/notesSlice';\r\nimport searchBarReducer from \"./reducers/searchBarSlice\";\r\nimport addNoteButtonReducer from \"./reducers/addNoteButtonSlice\";\r\nimport controlsPopupReducer from \"./reducers/controlsPopup\";\r\nimport infoPopupReducer from \"./reducers/infoPopupSlice\";\r\n\r\nexport const store = configureStore({\r\n    reducer: {\r\n        notes: notesReducer,\r\n        searchBar: searchBarReducer,\r\n        addNoteButton: addNoteButtonReducer,\r\n        controlsPopup: controlsPopupReducer,\r\n        infoPopup: infoPopupReducer\r\n    }\r\n});","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport { store } from './state/store';\r\nimport { Provider } from 'react-redux';\r\nimport { BrowserRouter } from 'react-router-dom';  \r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <BrowserRouter>\r\n      <Provider store={store}>\r\n        <App />\r\n      </Provider>\r\n    </BrowserRouter>  \r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}